name: Cut Release Tag
permissions:
  contents: write # Required for pushing tags and creating releases

on:
  workflow_dispatch:
    inputs:
      version-level:
        description: "Version Level to Bump"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

run-name: Cut Release Tag (new ${{ inputs.version-level }} version)

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.cut-tag.outputs.version }}
      tag: ${{ steps.cut-tag.outputs.tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: p6m-actions/js-pnpm-setup@v1
        with:
          node-version: "20"

      - name: Cut Tag
        id: cut-tag
        uses: p6m-actions/js-pnpm-cut-tag@v1
        with:
          version-level: ${{ github.event.inputs.version-level }}

      - name: Output Version Info
        run: echo "Released version ${{ steps.cut-tag.outputs.version }} with tag ${{ steps.cut-tag.outputs.tag }}" | tee -a $GITHUB_STEP_SUMMARY

  docker-build:
    uses: p6m-dev/github-actions/.github/workflows/build-deploy-docker.yaml@main
    needs:
      - release

    with:
      github_ref: ${{ needs.release.outputs.tag }}
      registry: ${{ vars.ARTIFACTORY_HOSTNAME }}
      image-name: ybor-playground-docker/applications/nextjs-test-frontend-server
      context: "."
      dockerfile: ./Dockerfile
      tags: |
        type=ref,event=branch
        type=ref,event=pr
        type=raw,value=latest,enable={{is_default_branch}}
        type=raw,value=${{ needs.release.outputs.version }},enable={{is_default_branch}}
        type=sha
      # linux-arm-runner: ubuntu-24.04-arm-provisioned

    secrets:
      username: ${{ secrets.ARTIFACTORY_USERNAME }}
      password: ${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}
      secrets: |
        artifactory-token=${{ secrets.ARTIFACTORY_TOKEN }}

  create-release:
    runs-on: ubuntu-latest
    needs:
      - release
      - docker-build

    steps:
      - name: Make Artifacts
        run: |
          echo '${{ needs.docker-build.outputs.digest }}' | tee digest.txt

      - uses: ncipollo/release-action@v1
        with:
          name: Version ${{ needs.release.outputs.version }}
          tag: ${{ needs.release.outputs.tag }}
          makeLatest: true
          artifacts: "digest.txt"
          removeArtifacts: true
          generateReleaseNotes: true
          body: |
            Application version: `${{ needs.release.outputs.version }}`
            Docker image digest: `${{ needs.docker-build.outputs.digest }}`