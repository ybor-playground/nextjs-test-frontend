FROM node:20-alpine AS base

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Set up workspace
WORKDIR /app

# Build stage
FROM base AS builder
# Copy only package files first to leverage Docker caching
COPY pnpm-lock.yaml ./
COPY package.json ./

# Install dependencies (with caching)
RUN pnpm fetch 

# Copy application code
COPY . .

# Install with offline mode (using cache)
RUN pnpm install --frozen-lockfile --offline

# Build the application (using next build which enables standalone output)
RUN pnpm build

# Production stage - use minimal image for smaller size
FROM node:20-alpine AS runner

WORKDIR /app

# Create a non-root user for better security
RUN addgroup --system --gid 1001 nodejs && \
  adduser --system --uid 1001 nextjs && \
  chown -R nextjs:nodejs /app

# Copy standalone build files (config enabled in next.config.js)
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

USER nextjs

ENV NODE_ENV=production

# Expose the port the app runs on
EXPOSE 3000

# Run the app using the standalone server.js generated by Next.js
# Set hostname to 0.0.0.0 to make it accessible from outside the container
ENV HOSTNAME=0.0.0.0
CMD ["node", "server.js"]